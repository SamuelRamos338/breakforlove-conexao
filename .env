const mongoose = require('mongoose');
const express = require('express');
const cors = require('cors');
const dotenv = require('dotenv'); // Para variáveis de ambiente
const morgan = require('morgan');   // Para logging

dotenv.config(); // Carrega as variáveis de ambiente do arquivo .env

const app = express();
const port = process.env.PORT || 3000; // Use a porta da env ou 3000 como padrão

app.use(cors());
app.use(express.json());
app.use(morgan('dev')); // Log de requisições no console (para desenvolvimento)

// Conexão com o MongoDB
mongoose.connect(process.env.MONGODB_URI, { // Use a variável de ambiente
  useNewUrlParser: true,  // Opcional (dependendo da versão do Mongoose)
  useUnifiedTopology: true, // Opcional (dependendo da versão do Mongoose)
  appName: "breakforlove"
})
  .then(() => console.log('MongoDB Atlas conectado com sucesso'))
  .catch(err => {
    console.error('Erro ao conectar ao MongoDB Atlas:', err);
    process.exit(1); // Encerra o processo em caso de falha na conexão
  });

// Rotas
const usuarioRoutes = require('./routes/usuarioRoute');
app.use('/api/usuario', usuarioRoutes);

const lembreteRoutes = require('./routes/lembreteRoute');
app.use('/api/lembrete', lembreteRoutes);

const checkListRoutes = require('./routes/checkListRoute');
app.use('/api/checkList', checkListRoutes);

const designRoutes = require('./routes/designRoute');
app.use('/api/design', designRoutes);

const conexaoRoutes = require('./routes/conexaoRoute');
app.use('/api/conexao', conexaoRoutes);

app.get('/', (req, res) => {
  res.send('API BreakForLove está no ar!');
});

// Middleware de tratamento de erros (deve ser definido após as rotas)
app.use((err, req, res, next) => {
  console.error(err.stack);
  res.status(500).send('Algo deu errado!');
});
app.listen(port, () => {
  console.log(`Servidor rodando na porta ${port}`);
});